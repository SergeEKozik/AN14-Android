package eveshtard.Lab6.Space;
/*Создаем интерфейс IStart. В интерфейсе определяем методы:
• предстартовая проверка систем (возвращает true/false) pre-start check
• запуск двигателей(void) engine start
• старт(void) start

Создаем класс Космодром. В классе создаем метод:
• запуск start
Метод запуск принимает объект типа IStart.
В методе первым делом осуществляем предстартовую проверку (pre-start check) переданного
объекта, если она провалилась(метод вернул false) выводим сообщение
«Предстартовая проверка провалена».
Если проверка прошла успешно, то производим запуск
двигателей(вызываем метод запуска двигателя).
После этого производиться обратный отсчет (10 ..... 1).
После обратного отсчета вызываем метод старт переданного объекта.

Создаем класс Шаттл (Space Shuttle).
Шаттл реализует интерфейс IStart.
• В методе предстартовой проверки (pre-start check) генерируем случайное число в диапазоне от
0 до 10.
Если сгенерированное число больше 3-х, то проверка прошла успешно.
Если нет--не успешно.
• В методе запуска двигателей выводим строку в консоль
«Двигатели Шаттла запущены. Все системы в норме.»
• В методе старт выводим строку в консоль. «Старт Шаттла»

По аналогии создайте еще пару классов реализующих интерфейс
IStart(например SpaceX).
Для предстартовой проверки можете придумать совою логику, главное чтобы метод
возвращал true либо false в зависимости от того прошла ли она успешно.
Запустите в космос созданные вами космические корабли используя созданный вами космодром и его метод старт.*/

public class Run {
    public static void main(String[] args) throws InterruptedException {
        SpaceX starShip = new SpaceX();
        Spaceport capeCanaveral = new Spaceport(starShip);
        capeCanaveral.start();

        BlueOrigin newGlen = new BlueOrigin();
        Spaceport kennedySpaceCenter = new Spaceport(newGlen);
        kennedySpaceCenter.start();

        RosCosmos soyuz = new RosCosmos();
        Spaceport baikonur = new Spaceport(soyuz);
        baikonur.start();


    }
}
